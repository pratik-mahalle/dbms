# MongoDB Aggregation and Indexing Guide

## Overview

This guide provides an introduction to **Aggregation** and **Indexing** in MongoDB with examples. Aggregation allows for advanced data processing and analysis, while indexing improves query performance by making data retrieval more efficient.

## MongoDB Collection Setup

### Sample Data

We assume you have a collection called `Employees` where each document contains details about an employee, such as `EmpID`, `Name`, `Department`, `Position`, `Salary`, and `JoiningDate`.

You can insert the sample data into the `Employees` collection as shown below:

```javascript
db.Employees.insertMany([
    { "EmpID": 1, "Name": "John Doe", "Department": "Sales", "Position": "Manager", "Salary": 80000, "JoiningDate": new Date("2019-05-20") },
    { "EmpID": 2, "Name": "Jane Smith", "Department": "Sales", "Position": "Salesperson", "Salary": 50000, "JoiningDate": new Date("2020-03-15") },
    { "EmpID": 3, "Name": "Alice Brown", "Department": "HR", "Position": "HR Manager", "Salary": 75000, "JoiningDate": new Date("2018-07-10") },
    { "EmpID": 4, "Name": "Bob White", "Department": "IT", "Position": "Developer", "Salary": 90000, "JoiningDate": new Date("2021-01-10") },
    { "EmpID": 5, "Name": "Chris Green", "Department": "IT", "Position": "Developer", "Salary": 85000, "JoiningDate": new Date("2022-02-20") }
]);
```

## 1. **Aggregation in MongoDB**

MongoDBâ€™s aggregation framework allows you to perform complex queries and transformations on your data. Below are common aggregation examples.

### Example 1: Calculate the Average Salary by Department

To calculate the average salary for each department, use the following aggregation pipeline:

```javascript
db.Employees.aggregate([
    { "$group": { "_id": "$Department", "AverageSalary": { "$avg": "$Salary" } } },
    { "$project": { "Department": "$_id", "AverageSalary": 1, "_id": 0 } }
]);
```

**Explanation**:
- `$group`: Groups documents by `Department` and calculates the average salary for each department.
- `$project`: Formats the output to include `Department` and `AverageSalary`.

### Example 2: Find the Total Salary Paid in Each Department

To find the total salary paid to employees in each department, use:

```javascript
db.Employees.aggregate([
    { "$group": { "_id": "$Department", "TotalSalary": { "$sum": "$Salary" } } },
    { "$project": { "Department": "$_id", "TotalSalary": 1, "_id": 0 } }
]);
```

**Explanation**:
- `$sum`: Computes the total salary paid in each department.

### Example 3: Count the Number of Employees in Each Position

To count the number of employees in each job position, use:

```javascript
db.Employees.aggregate([
    { "$group": { "_id": "$Position", "EmployeeCount": { "$sum": 1 } } },
    { "$project": { "Position": "$_id", "EmployeeCount": 1, "_id": 0 } }
]);
```

**Explanation**:
- `$sum`: Counts the number of employees in each position by summing `1` for each document.

### Example 4: Sort Departments by Total Salary in Descending Order

To sort departments by the total salary in descending order:

```javascript
db.Employees.aggregate([
    { "$group": { "_id": "$Department", "TotalSalary": { "$sum": "$Salary" } } },
    { "$sort": { "TotalSalary": -1 } }
]);
```

**Explanation**:
- `$sort`: Sorts the departments by `TotalSalary` in descending order.

### Example 5: Retrieve the Highest Salary in Each Department

To retrieve the highest salary in each department:

```javascript
db.Employees.aggregate([
    { "$group": { "_id": "$Department", "HighestSalary": { "$max": "$Salary" } } },
    { "$project": { "Department": "$_id", "HighestSalary": 1, "_id": 0 } }
]);
```

**Explanation**:
- `$max`: Finds the highest salary in each department.

## 2. **Indexing in MongoDB**

Indexes are used to improve query performance by allowing MongoDB to quickly search for specific fields within a collection. Below are some examples of how to create and use indexes in MongoDB.

### Creating Indexes

- **Single Field Index**: Create an index on the `Department` field to optimize queries that filter by department.

   ```javascript
   db.Employees.createIndex({ "Department": 1 });
   ```

   This creates an ascending index on the `Department` field.

- **Compound Index**: Create a compound index on both `Department` and `Position` to optimize queries that filter by both fields.

   ```javascript
   db.Employees.createIndex({ "Department": 1, "Position": 1 });
   ```

- **Text Index**: Create a text index on the `Name` field to enable text search.

   ```javascript
   db.Employees.createIndex({ "Name": "text" });
   ```

   After creating this index, you can search for employees using the `$text` operator:

   ```javascript
   db.Employees.find({ "$text": { "$search": "John" } });
   ```

### Using Indexes in Queries

- **Explain Plan**: You can use the `explain()` method to see if MongoDB is using an index for a specific query. For example:

   ```javascript
   db.Employees.find({ "Department": "IT" }).explain("executionStats");
   ```

   This will show details about how MongoDB executed the query, including whether it used an index.

### Dropping Indexes

- **Drop a Single Index**:

   ```javascript
   db.Employees.dropIndex("Department_1");
   ```

- **Drop All Indexes**:

   ```javascript
   db.Employees.dropIndexes();
   ```

## Summary

This guide covered the following topics:

1. **Aggregation**:
   - Using operators like `$group`, `$sum`, `$avg`, `$max`, `$sort`, and `$project` for data analysis and transformation.
   
2. **Indexing**:
   - Creating **single-field**, **compound**, and **text** indexes to optimize query performance.
   - Using the `explain()` method to understand query execution.

These tools and techniques are essential for improving the efficiency and performance of your MongoDB queries and data processing.
