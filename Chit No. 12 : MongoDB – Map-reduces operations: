ongoDB Map-Reduce Example: Word Count

## Overview
This example demonstrates how to use the `mapReduce` function in MongoDB to count the frequency of each word in a collection of documents. The collection `texts` contains documents with a `text` field, and the task is to count how many times each word appears across all documents in the collection.

## Steps

### 1. Create MongoDB Collection

The first step is to create a collection called `texts` and insert sample documents with text. Each document has a field `text` which contains a string of words.

```javascript
db.texts.insertMany([
{ "product": "Laptop", "quantity": 2, "price": 1000 }
{ "product": "Laptop", "quantity": 1, "price": 1000 }
{ "product": "Phone", "quantity": 3, "price": 500 }
{ "product": "Tablet", "quantity": 1, "price": 700 }
{ "product": "Phone", "quantity": 2, "price": 500 }

]);
```

### 2. Write Map and Reduce Functions

The `mapReduce` function in MongoDB requires two main parts: the **map** function and the **reduce** function.

#### Map Function

The map function processes each document and emits key-value pairs where the key is the word, and the value is 1 (indicating the presence of that word).

```javascript
var mapFunction = function() {
  var words = this.text.split(" "); // Split the text into words
  for (var i = 0; i < words.length; i++) {
    emit(words[i], 1); // Emit each word with a count of 1
  }
};
```

- **Explanation**: This function splits the `text` field of each document into words and emits each word with a count of `1`.

#### Reduce Function

The reduce function takes the emitted key-value pairs from the map function and aggregates them by summing the values (word counts).

```javascript
// Map function to emit product and calculated sales
var mapFunction = function() {
    emit(this.product, this.quantity * this.price);
};

// Reduce function to sum sales by product
var reduceFunction = function(key, values) {
    return Array.sum(values);
};
//Run mapReduce command
db.sales.mapReduce(
    mapFunction,
    reduceFunction,
    {
        out: "total_sales_per_product" // The output collection
    }
);

```

- **Explanation**: This command applies the `mapFunction` to each document in the `texts` collection, reduces the counts using the `reduceFunction`, and stores the results in a new collection called `word_count`.

### 4. View the Results

After the Map-Reduce operation completes, the results will be stored in the `word_count` collection. You can query this collection to view the frequency of each word.

```javascript
db.-----.find();
```
